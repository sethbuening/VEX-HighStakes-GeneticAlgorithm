import pybullet as p
#import time # For visualization
import pybullet_data, math, torch, os, time
import NeuralNetwork

WEIGHTS = 272
BIASES = 26
PARAMETERS = WEIGHTS+BIASES

def suppress_output(func, *args, **kwargs):
    """
    Suppresses all output (stdout and stderr) during the execution of the given function.
    This includes Python and lower-level C library outputs.
    """
    # Redirect low-level stdout and stderr
    with open(os.devnull, 'w') as devnull:
        old_stdout = os.dup(1)  # Save the original stdout
        old_stderr = os.dup(2)  # Save the original stderr
        os.dup2(devnull.fileno(), 1)  # Redirect stdout to /dev/null
        os.dup2(devnull.fileno(), 2)  # Redirect stderr to /dev/null
        try:
            # Call the function while output is suppressed
            return func(*args, **kwargs)
        finally:
            # Restore original stdout and stderr
            os.dup2(old_stdout, 1)
            os.dup2(old_stderr, 2)
individual = [-0.9729652396413241, -0.30134212893007417, 0.5165743057359458, -0.7965037848488763, -0.4067059511159985, -1.1990589554127489, 0.20904443972830866, 0.5172205489822292, 0.390306592915443, 0.5215367820299249, 0.2630579208818844, -0.9169594742392875, 0.9400403103057138, -0.42965618137445794, -0.7443727701247447, 0.3952501319852328, 0.8599723417627767, -0.8002475169850447, 0.25330247895252334, -0.43047325223307986, 0.14959975235898937, 0.78944628804573, -0.7455301557448044, -0.588417359726416, 0.16130675451808107, 0.37597206510268055, -0.19080187519542102, 0.729170975415337, 0.023311162349553077, -0.966834489044474, -0.855112856510224, -0.3483542772873125, 0.2769186760679019, 0.2703780873581927, 0.45928919140946767, 0.1993851207379586, 0.8469389104566006, -0.11152906873478452, 0.2859818604763904, -0.6767037914450778, -0.32274169762183536, 0.5544975434860919, -0.3850136326245892, -0.6786287359941605, 0.4951732923828207, -0.8641129697662913, -0.2580085054868925, -0.9755336099723992, -1.355712251196402, 0.9028759422578682, -0.398684053298644, -0.27887991997706485, -0.17714333873765875, 0.8203397206093151, 0.04846196271595815, 0.6015718963376608, 0.13221516522513416, -0.29461423387950264, -0.7242512397099168, -0.23278329324337993, -0.5526760293822232, -0.12473468362333784, 0.21787350722430232, 0.8841793289520519, -0.8700589843044144, 0.2677495705790694, -0.2930648625947444, 0.19205722557216065, 0.5474351441711316, -0.9765331785604567, 0.33315840884845105, 0.8191593319191937, 0.7628470468429249, -0.8574127785145609, 0.520923115333459, -0.39972468903790226, 0.8786227906243496, -0.7674841789521287, 0.3484091658827235, 1.1776484325648895, 0.8203359206467369, 0.6615797792562794, 0.08482616893968498, 0.15247610867470257, 0.41327298548515917, -0.2659583999839919, -0.14096680536788184, 0.6695536454864315, 0.9725268762134418, 0.46184822348033827, 0.0794656010497361, 0.47034339489190596, 0.04387641923837689, 0.5804488044573134, 0.6491614171483968, 0.8690640702009929, 0.2636367260275351, 0.4857455898932266, -0.7934657987810121, 0.9365787004701007, -0.5047957020253246, 0.0983729291653396, 0.048511360280259375, 0.13718913449931835, 0.3985284200369996, 0.24866705639128475, 0.5228528160875499, 0.42441478037657765, -0.25660017477923214, 0.22856139939777664, 0.22238937384207502, 0.5121078056827166, -0.4312953535085198, 0.8034066973382115, 0.9454799813028876, 0.8537897712857886, 0.09616997347455587, -0.7803343708424817, -0.24879078553327494, 0.8419259257138307, -0.20545606120134785, 0.22372025844225268, 0.4025659787203395, -0.6607017290309477, -0.2700048624112572, -0.7368111229702288, -0.11494433653344127, -0.18251953488487882, -0.12696170881381452, -0.8451347603522792, -0.27818830008748713, -0.9399144737370303, 0.4498159236126644, -0.2463660481680974, 0.004539351418699988, 0.9611460649844914, 0.3170622090806585, 0.32715645295661133, 0.7867936647856024, -0.8125551210763693, 0.47271094074128506, -0.21707464621344028, 0.5799190970440147, 0.38056468707163704, 0.3722718698878724, -0.20769986425914944, -0.7811695811226198, 0.3432872082884846, -0.01622634532173972, -1.1115765482652815, 0.30952304480075044, -0.930870260168744, 0.28761795211464686, -0.28529528189425135, 0.187404539222916, 0.07393895263340022, 0.14958646980078338, -0.10019199095290765, 0.7557471433704143, 0.2944323680188665, -0.08960402341642215, 0.7886507770417884, 0.4797585874730408, -0.5638673080689196, -0.22898446716324009, -0.285575123701314, 0.2261635730748237, 0.6720447576995416, 0.28250792687935955, -0.8313782200401885, 0.9877473372775663, -0.8912520127849519, 0.8721106201113424, -0.19395344503231746, -0.45615124700902254, -0.16349865736176572, -0.6073452016242551, -0.048756149438857754, 0.10327005632903385, 0.6832249693965269, -0.4935862961204194, 0.45229209150936367, -0.22392028073325143, -0.060424980269121464, -0.8570631149355938, 0.15696611833935575, 0.7856546486561751, -0.9393000774651412, -0.4362483523976024, 0.965316427003415, -0.7501534419616094, 0.8813455944595219, -0.8942028918779577, 0.9699199331318393, 0.5501375956368866, -0.5603542709213614, 0.8514070304361123, 0.5548833438675356, -0.6798816940037369, -0.9282108545012164, -0.5652398357984367, 0.8388841092141255, 0.1422940110215605, -0.1029530016095892, 0.4701209129383035, -0.8082670927376608, -0.7044360007735426, -0.043644374191180724, 0.22284713051747945, 0.9682842222688322, -0.5114696019281886, -0.5580034603366615, 0.39246179227735567, 0.4158591875312277, 0.4820832043250217, -0.24669607965060925, 0.2876292382001018, -0.1460247252076552, 0.23820029899982562, 0.46022105470409325, -0.3398359384153413, 0.8354710320039649, 0.4494132168363725, -0.46061879224113467, 0.6007038359303054, -0.4114060102625312, 0.11200582659526921, -0.8823776959473344, -0.8907452656379304, 0.9968750507993545, -0.9099058819564521, -0.03924691190612174, 0.24379581644128595, 0.26976110210099846, 0.291040953682869, -0.10211330221588844, 0.7723664316355994, -0.7000346399337223, 0.15879690416280945, 0.02542374551360571, 0.4981438521072603, -0.5940560298048168, -0.19082556683359497, -0.46506149570183153, -0.5948657548472018, 0.577278076990789, -0.8965596569383676, -0.11981888892000558, 0.04981171991669053, 0.9775377140095244, 0.5027273077654708, 0.9122246993957625, -0.21801227316272498, -0.3116892727765236, -0.2076231576070242, 0.31263519582716226, -0.06853356748137895, 0.7154418899558637, -0.6850354171996185, 0.15508399478730306, -0.42852334797204694, -0.8163525597571244, 0.8060331473208762, -0.6314847292462764, -1.3278661005890031, 0.7585135798436131, 0.023915984670797343, 0.3218502415859088, 0.27603146495069586, -0.7644847610742431, 0.39098329313197877, -0.8775896674622343, -0.7744105303373436, -0.9960395957040262, -0.6341165859220634, 0.7669709801450153, 0.17189501443038133, -0.6399676813141166, -0.854240281526162, 0.3700836635367597, 0.8874182166464086, -0.5506546896503624, 0.6890680553580699, 0.031516984128721434, 0.48760272839482166, 0.5796022036366844, -0.555948588255265, 0.9952873981465764, -0.8029118445594812, 0.6689405709892553, -0.5574628665184248, 0.12578288092055256, 0.1693310640837986, -0.5104131617116507, -0.05822493578904031, -0.7104466486147357, 0.07317292379177529, 0.4605590440686116]
weights = [individual[i] for i in range(WEIGHTS)] #torch.randn(272, dtype=torch.float32)
biases = [individual[i] for i in range(WEIGHTS, PARAMETERS)] # torch.randn(26, dtype=torch.float32)

p.connect(p.GUI)
p.setAdditionalSearchPath(pybullet_data.getDataPath()) #optionally for the basic URDF files
p.setGravity(0, 0, -9.81)

# Load URDF files
_ = p.loadURDF("plane.urdf")
startPos = [0,0,0.01]
startOrientation = p.getQuaternionFromEuler([0,0,0])
robotId = suppress_output(p.loadURDF, "husky/husky.urdf", startPos, startOrientation)
#set the center of mass frame (loadURDF sets base link frame) startPos/Ornp.resetBasePositionAndOrientation(boxId, startPos, startOrientation)
startOrientation2 = p.getQuaternionFromEuler([90,0,0])
boxes = [
    p.loadURDF("urdf/box.urdf",[3,1,0.3],startOrientation2),
    p.loadURDF("urdf/box.urdf",[5,0,0.3],startOrientation2),
    p.loadURDF("urdf/box.urdf",[4,3.5,0.3],startOrientation2)
    ]

# Robot control
targetVelLeft = 0 #rad/s
targetVelRight = 0 #rad/s
maxForce = 10  #Newton
instance = NeuralNetwork.NeuralNetwork(weights, biases) # import weights and biases from the genetic loop file
# JOINTS:
#2,4 left
#3,5 right
for i in range (14400):# 14400 is 1 minute
    # Gather data (gets x and y positions of the boxes and the robot)
    input = []
    for obj in boxes + [robotId]:
        position, _ = p.getBasePositionAndOrientation(obj)
        input.extend([position[0], position[1]])
    # Calculate motor velocity with neural network
    targetVelLeft,targetVelRight = instance.forward(torch.tensor(input).unsqueeze(0))
    # Move the motors
    p.setJointMotorControl(robotId, 2, p.VELOCITY_CONTROL, targetVelLeft, maxForce)
    p.setJointMotorControl(robotId, 3, p.VELOCITY_CONTROL, targetVelRight, maxForce)
    p.setJointMotorControl(robotId, 4, p.VELOCITY_CONTROL, targetVelLeft, maxForce)
    p.setJointMotorControl(robotId, 5, p.VELOCITY_CONTROL, targetVelRight, maxForce)
    p.stepSimulation()

#Scoring: 100 is the best score possible
score = 100
for box in boxes:
    position, _ = p.getBasePositionAndOrientation(box)
    score -= math.fabs(10-position[1])
print(score)